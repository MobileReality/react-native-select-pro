// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select should generate Select snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      accessibilityLabel="Open a dropdown"
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "#ffffff",
            "borderRadius": 4,
            "borderWidth": 1,
            "height": 40,
          },
          Object {},
          undefined,
          Object {},
        ]
      }
    >
      <View
        style={
          Object {
            "height": "100%",
            "justifyContent": "center",
            "paddingHorizontal": 12,
            "paddingRight": 55,
            "width": "100%",
          }
        }
      >
        <Text
          numberOfLines={1}
          style={
            Array [
              Object {
                "fontSize": 12,
              },
              Object {
                "color": "#808080",
              },
              undefined,
            ]
          }
        >
          Select...
        </Text>
      </View>
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": "100%",
              "justifyContent": "center",
              "position": "absolute",
              "right": 8,
              "top": 0,
            },
            undefined,
          ]
        }
      >
        <Image
          collapsable={false}
          nativeID="animatedComponent"
          source={
            Object {
              "testUri": "../../../src/assets/icons/chevron-down.png",
            }
          }
          style={
            Object {
              "height": 25,
              "transform": Array [
                Object {
                  "rotate": "0deg",
                },
              ],
              "width": 25,
              "zIndex": -1,
            }
          }
        />
      </View>
    </View>
  </View>,
  <View
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel=""
      bounces={false}
      data={
        Array [
          Object {
            "label": "First Option",
            "value": "bd7acbea-c1b1-46c2-aed5-3ad53abb28ba",
          },
          Object {
            "label": "Second Option",
            "value": "3ac68afc-c605-48d3-a4f8-fbd91aa97f63",
          },
          Object {
            "label": "Third Option",
            "value": "58694a0f-3da1-471f-bd96-145571e29d72",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First Option option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              First Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second Option option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              Second Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third Option option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              Third Option
            </Text>
          </View>
        </View>
        <View
          style={
            Object {
              "height": 80,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with searchable enabled should generate Select with searchable enabled snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      accessibilityLabel="Open a dropdown"
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Array [
          Object {
            "backgroundColor": "#ffffff",
            "borderRadius": 4,
            "borderWidth": 1,
            "height": 40,
          },
          Object {},
          undefined,
          Object {},
        ]
      }
    >
      <View
        style={
          Object {
            "height": "100%",
            "justifyContent": "center",
            "paddingHorizontal": 12,
            "paddingRight": 55,
            "width": "100%",
          }
        }
      >
        <TextInput
          accessibilityLabel="Place text"
          editable={true}
          onChangeText={[Function]}
          onPressIn={[Function]}
          placeholder="Select..."
          style={
            Object {
              "fontSize": 12,
            }
          }
          value=""
        />
      </View>
      <View
        style={
          Array [
            Object {
              "alignItems": "center",
              "flexDirection": "row",
              "height": "100%",
              "justifyContent": "center",
              "position": "absolute",
              "right": 8,
              "top": 0,
            },
            undefined,
          ]
        }
      >
        <Image
          collapsable={false}
          nativeID="animatedComponent"
          source={
            Object {
              "testUri": "../../../src/assets/icons/chevron-down.png",
            }
          }
          style={
            Object {
              "height": 25,
              "transform": Array [
                Object {
                  "rotate": "0deg",
                },
              ],
              "width": 25,
              "zIndex": -1,
            }
          }
        />
      </View>
    </View>
  </View>,
  <View
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel=""
      bounces={false}
      data={
        Array [
          Object {
            "label": "Fist test options",
            "value": "test1",
          },
          Object {
            "label": "Second test options",
            "value": "test2",
          },
          Object {
            "label": "Third test option",
            "value": "test3",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Fist test options option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              Fist test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second test options option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              Second test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third test option option"
            accessible={true}
            collapsable={false}
            focusable={true}
            nativeID="animatedComponent"
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                  },
                  undefined,
                ]
              }
            >
              Third test option
            </Text>
          </View>
        </View>
        <View
          style={
            Object {
              "height": 80,
            }
          }
        />
      </View>
    </RCTScrollView>
  </View>,
]
`;
