"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[559],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9633:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={id:"required",title:"Required props",sidebar_label:"Required"},i=void 0,l={unversionedId:"api/required",id:"api/required",title:"Required props",description:"In `` is only one required prop",source:"@site/docs/api/required.md",sourceDirName:"api",slug:"/api/required",permalink:"/react-native-select-pro/docs/api/required",draft:!1,editUrl:"https://github.com/MobileReality/react-native-select-pro/website/docs/api/required.md",tags:[],version:"current",frontMatter:{id:"required",title:"Required props",sidebar_label:"Required"},sidebar:"docs",previous:{title:"SelectProvider",permalink:"/react-native-select-pro/docs/api/select-provider"},next:{title:"Common features",permalink:"/react-native-select-pro/docs/api/common"}},p={},s=[{value:"options",id:"options",level:3},{value:"Example",id:"example",level:4}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"<Select />")," is only one required prop"),(0,a.kt)("h3",{id:"options"},"options"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"options: OptionsType;\n")),(0,a.kt)("p",null,"Data can be passed as an array with label and value object"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"[{ value: 'somevalue', label: 'somelabel' }];\n")),(0,a.kt)("p",null,"OR as an array with structure known from react-native SectionList"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"[\n    {\n        title: 'sometitle',\n        data: { value: 'somevalue', label: 'somelabel' },\n    },\n];\n")),(0,a.kt)("p",null,"For now options list with sections are not working with multiSelection, searchable and scrollToSelectedOption. We will unblock all of the features soon."),(0,a.kt)("p",null,'If array is empty then is showing "No options" text.'),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:"jsx",jsx:!0},"import React from 'react';\nimport { View } from 'react-native';\nimport { Select } from '@mobile-reality/react-native-select-pro';\n\nconst SomeComponent = () => {\n    return (\n        <View>\n            <Select options={[{ value: 'somevalue', label: 'somelabel' }]} />\n        </View>\n    );\n};\n\nconst SomeComponentWithSectionList = () => {\n    return (\n        <View>\n            <Select\n                options={[\n                    {\n                        title: 'sometitle',\n                        data: { value: 'somevalue', label: 'somelabel' },\n                    },\n                ]}\n            />\n        </View>\n    );\n};\n")))}u.isMDXComponent=!0}}]);