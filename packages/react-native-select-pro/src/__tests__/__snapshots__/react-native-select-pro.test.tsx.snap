// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Arrow should generate Arrow snapshot 1`] = `
<Arrow
  animation={200}
  customSelectControlArrowIconSource={Object {}}
  disabled={false}
  isOpened={true}
  multiSelection={false}
  onPressSelectControl={[Function]}
  selectControlArrowImageStyle={Object {}}
/>
`;

exports[`Select should generate Select snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 55,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Array [
                Object {
                  "fontSize": 12,
                  "textAlign": "left",
                },
                undefined,
                Object {
                  "color": "#808080",
                },
              ]
            }
          >
            Select...
          </Text>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <Image
            collapsable={false}
            source={
              Object {
                "testUri": "packages/react-native-select-pro/src/assets/icons/chevron-down.png",
              }
            }
            style={
              Object {
                "height": 25,
                "transform": Array [
                  Object {
                    "rotate": "0deg",
                  },
                ],
                "width": 25,
                "zIndex": -1,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First Option",
            "value": "bd7acbea-c1b1-46c2-aed5-3ad53abb28ba",
          },
          Object {
            "label": "Second Option",
            "value": "3ac68afc-c605-48d3-a4f8-fbd91aa97f63",
          },
          Object {
            "label": "Third Option",
            "value": "58694a0f-3da1-471f-bd96-145571e29d72",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third Option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with custom left icon should generate Select with custom left icon snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "paddingLeft": 8,
              },
              Object {
                "height": "100%",
                "justifyContent": "center",
              },
            ]
          }
        >
          <Image
            source={
              Object {
                "testUri": "packages/react-native-select-pro/src/__tests__/assets/search.png",
              }
            }
            style={
              Object {
                "height": 15,
                "width": 15,
              }
            }
          />
        </View>
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 55,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Array [
                Object {
                  "fontSize": 12,
                  "textAlign": "left",
                },
                undefined,
                Object {
                  "color": "#808080",
                },
              ]
            }
          >
            Select...
          </Text>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <Image
            collapsable={false}
            source={
              Object {
                "testUri": "packages/react-native-select-pro/src/assets/icons/chevron-down.png",
              }
            }
            style={
              Object {
                "height": 25,
                "transform": Array [
                  Object {
                    "rotate": "0deg",
                  },
                ],
                "width": 25,
                "zIndex": -1,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First Option",
            "value": "bd7acbea-c1b1-46c2-aed5-3ad53abb28ba",
          },
          Object {
            "label": "Second Option",
            "value": "3ac68afc-c605-48d3-a4f8-fbd91aa97f63",
          },
          Object {
            "label": "Third Option",
            "value": "58694a0f-3da1-471f-bd96-145571e29d72",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third Option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with custom select control arrow icon should generate Select with custom select control arrow icon snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 55,
              },
            ]
          }
        >
          <Text
            numberOfLines={1}
            style={
              Array [
                Object {
                  "fontSize": 12,
                  "textAlign": "left",
                },
                undefined,
                Object {
                  "color": "#808080",
                },
              ]
            }
          >
            Select...
          </Text>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <Image
            collapsable={false}
            source={
              Object {
                "testUri": "packages/react-native-select-pro/src/__tests__/assets/arrow-down.png",
              }
            }
            style={
              Object {
                "height": 15,
                "transform": Array [
                  Object {
                    "rotate": "0deg",
                  },
                ],
                "width": 15,
                "zIndex": -1,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First Option",
            "value": "bd7acbea-c1b1-46c2-aed5-3ad53abb28ba",
          },
          Object {
            "label": "Second Option",
            "value": "3ac68afc-c605-48d3-a4f8-fbd91aa97f63",
          },
          Object {
            "label": "Third Option",
            "value": "58694a0f-3da1-471f-bd96-145571e29d72",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third Option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with multi selection and searchable should generate Select with multi selection and searchable enabled snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 40,
              },
            ]
          }
        >
          <RCTScrollView
            horizontal={true}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View>
              <TextInput
                accessibilityLabel="Place text"
                editable={true}
                onChangeText={[Function]}
                onPressIn={[Function]}
                placeholder="Select..."
                placeholderTextColor="#808080"
                style={
                  Array [
                    Object {
                      "fontSize": 12,
                    },
                    undefined,
                  ]
                }
                textAlign="left"
                value=""
              />
            </View>
          </RCTScrollView>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <View
            accessibilityLabel="Arrow for opening dropdown"
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          >
            <Image
              collapsable={false}
              source={
                Object {
                  "testUri": "packages/react-native-select-pro/src/assets/icons/chevron-down.png",
                }
              }
              style={
                Object {
                  "height": 25,
                  "transform": Array [
                    Object {
                      "rotate": "0deg",
                    },
                  ],
                  "width": 25,
                  "zIndex": -1,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First test options",
            "value": "test1",
          },
          Object {
            "label": "Second test options",
            "value": "test2",
          },
          Object {
            "label": "Third test option",
            "value": "test3",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First test options option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second test options option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third test option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third test option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with multi selection should generate Select with multi selection enabled snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 40,
              },
            ]
          }
        >
          <RCTScrollView
            horizontal={true}
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View>
              <View
                accessibilityLabel="Placeholder in multi-select"
                accessible={true}
                collapsable={false}
                focusable={true}
                onBlur={[Function]}
                onClick={[Function]}
                onFocus={[Function]}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Array [
                    Object {
                      "alignItems": "flex-start",
                      "display": "flex",
                      "justifyContent": "center",
                    },
                    undefined,
                    Object {
                      "width": "100%",
                    },
                  ]
                }
              >
                <Text
                  numberOfLines={1}
                  style={
                    Array [
                      Object {
                        "fontSize": 12,
                        "textAlign": "left",
                      },
                      undefined,
                      Object {
                        "color": "#808080",
                      },
                    ]
                  }
                >
                  Select...
                </Text>
              </View>
            </View>
          </RCTScrollView>
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <View
            accessibilityLabel="Arrow for opening dropdown"
            accessible={true}
            collapsable={false}
            focusable={true}
            onBlur={[Function]}
            onClick={[Function]}
            onFocus={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          >
            <Image
              collapsable={false}
              source={
                Object {
                  "testUri": "packages/react-native-select-pro/src/assets/icons/chevron-down.png",
                }
              }
              style={
                Object {
                  "height": 25,
                  "transform": Array [
                    Object {
                      "rotate": "0deg",
                    },
                  ],
                  "width": 25,
                  "zIndex": -1,
                }
              }
            />
          </View>
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First Option",
            "value": "bd7acbea-c1b1-46c2-aed5-3ad53abb28ba",
          },
          Object {
            "label": "Second Option",
            "value": "3ac68afc-c605-48d3-a4f8-fbd91aa97f63",
          },
          Object {
            "label": "Third Option",
            "value": "58694a0f-3da1-471f-bd96-145571e29d72",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second Option
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third Option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third Option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;

exports[`Select with searchable enabled should generate Select with searchable enabled snapshot 1`] = `
Array [
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "position": "relative",
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <View
        accessibilityLabel="Open a dropdown"
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Array [
            Object {
              "backgroundColor": "#ffffff",
              "borderRadius": 4,
              "borderWidth": 1,
              "flexDirection": "row",
              "height": 40,
            },
            Object {},
            undefined,
            Object {},
          ]
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": "100%",
                "justifyContent": "center",
                "paddingHorizontal": 12,
              },
              Object {
                "paddingRight": 55,
              },
            ]
          }
        >
          <TextInput
            accessibilityLabel="Place text"
            editable={true}
            onChangeText={[Function]}
            onPressIn={[Function]}
            placeholder="Select..."
            placeholderTextColor="#808080"
            style={
              Array [
                Object {
                  "fontSize": 12,
                },
                undefined,
              ]
            }
            textAlign="left"
            value=""
          />
        </View>
        <View
          style={
            Array [
              Object {
                "alignItems": "center",
                "flexDirection": "row",
                "height": "100%",
                "justifyContent": "center",
                "position": "absolute",
                "right": 8,
                "top": 0,
              },
              undefined,
            ]
          }
        >
          <Image
            collapsable={false}
            source={
              Object {
                "testUri": "packages/react-native-select-pro/src/assets/icons/chevron-down.png",
              }
            }
            style={
              Object {
                "height": 25,
                "transform": Array [
                  Object {
                    "rotate": "0deg",
                  },
                ],
                "width": 25,
                "zIndex": -1,
              }
            }
          />
        </View>
      </View>
    </View>
  </View>,
  <View
    collapsable={false}
    pointerEvents="none"
    style={
      Object {
        "backgroundColor": "#ffffff",
        "borderBottomLeftRadius": 4,
        "borderBottomRightRadius": 4,
        "borderTopWidth": 0,
        "borderWidth": 1,
        "elevation": 5,
        "flex": 1,
        "left": 0,
        "maxHeight": 120,
        "opacity": 0,
        "position": "absolute",
        "top": 0,
        "width": 0,
        "zIndex": 1,
      }
    }
  >
    <RCTScrollView
      ListEmptyComponent={
        <NoOptions
          noOptionsText="No options"
        />
      }
      accessibilityLabel="Options list"
      accessibilityState={
        Object {
          "expanded": false,
        }
      }
      bounces={false}
      data={
        Array [
          Object {
            "label": "First test options",
            "value": "test1",
          },
          Object {
            "label": "Second test options",
            "value": "test2",
          },
          Object {
            "label": "Third test option",
            "value": "test3",
          },
        ]
      }
      getItem={[Function]}
      getItemCount={[Function]}
      getItemLayout={[Function]}
      keyExtractor={[Function]}
      keyboardShouldPersistTaps="handled"
      onContentSizeChange={[Function]}
      onLayout={[Function]}
      onMomentumScrollBegin={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      persistentScrollbar={true}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      testID="Options list"
      viewabilityConfigCallbackPairs={Array []}
    >
      <View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose First test options option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            forwardedRef={[Function]}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              First test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Second test options option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Second test options
            </Text>
          </View>
        </View>
        <View
          style={null}
        >
          <View
            accessibilityLabel="Choose Third test option option"
            accessibilityRole="button"
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "height": 40,
                "justifyContent": "center",
                "opacity": 1,
                "paddingHorizontal": 12,
              }
            }
          >
            <Text
              numberOfLines={1}
              style={
                Array [
                  Object {
                    "color": "#000000",
                    "fontSize": 12,
                    "textAlign": "left",
                  },
                  undefined,
                ]
              }
            >
              Third test option
            </Text>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>,
]
`;
